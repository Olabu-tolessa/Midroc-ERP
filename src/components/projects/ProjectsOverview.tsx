import React, { useState } from 'react';
import { 
  HardHat, 
  Plus, 
  Edit, 
  Eye, 
  Settings, 
  Download,
  Search,
  Filter,
  Trash2,
  CheckCircle,
  AlertCircle
} from 'lucide-react';
import { Project } from '../../types';
import { useAuth } from '../../contexts/AuthContext';
import { NewProjectModal } from './NewProjectModal';
import { ProjectDetailsModal } from './ProjectDetailsModal';
import { EditProjectModal } from './EditProjectModal';
import { addProject, updateProject, deleteProject } from '../../data/mockData';

interface ProjectsOverviewProps {
  projects: Project[];
}

export const ProjectsOverview: React.FC<ProjectsOverviewProps> = ({ projects }) => {
  const { user } = useAuth();
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [showNewProjectModal, setShowNewProjectModal] = useState(false);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedProject, setSelectedProject] = useState<Project | null>(null);
  const [notification, setNotification] = useState<{type: 'success' | 'error', message: string} | null>(null);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800';
      case 'planning':
        return 'bg-yellow-100 text-yellow-800';
      case 'completed':
        return 'bg-blue-100 text-blue-800';
      case 'on-hold':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical':
        return 'bg-red-100 text-red-800';
      case 'high':
        return 'bg-orange-100 text-orange-800';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800';
      case 'low':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
    }).format(amount);
  };

  const handleViewProject = (project: Project) => {
    setSelectedProject(project);
    setShowDetailsModal(true);
  };

  const handleEditProject = (project: Project) => {
    setSelectedProject(project);
    setShowEditModal(true);
  };

  const handleManageProject = (project: Project) => {
    setNotification({
      type: 'success',
      message: `Managing project: ${project.name}. Advanced project settings opened.`
    });
    setTimeout(() => setNotification(null), 3000);
  };

  const handleExportProject = (project: Project) => {
    // Create comprehensive project data for export
    const exportData = {
      projectName: project.name,
      projectId: project.id,
      status: project.status,
      priority: project.priority,
      progress: project.progress,
      budget: project.budget,
      timeline: `${project.startDate} to ${project.endDate}`,
      manager: project.manager.name,
      managerEmail: project.manager.email,
      team: project.team.map(member => member.name),
      teamDetails: project.team.map(member => ({
        name: member.name,
        email: member.email,
        role: member.role,
        department: member.department
      })),
      description: project.description,
      exportDate: new Date().toISOString()
    };
    
    // Create PDF-like formatted text content
    const pdfContent = `
MIDROC ERP - PROJECT EXPORT REPORT
=====================================

Project Name: ${exportData.projectName}
Project ID: ${exportData.projectId}
Status: ${exportData.status.toUpperCase()}
Priority: ${exportData.priority.toUpperCase()}
Progress: ${exportData.progress}%
Budget: $${exportData.budget.toLocaleString()}
Timeline: ${exportData.timeline}

PROJECT MANAGER
---------------
Name: ${exportData.manager}
Email: ${exportData.managerEmail}

CONSTRUCTION TEAM (${exportData.teamDetails.length} members)
------------------
${exportData.teamDetails.map(member => 
  `• ${member.name} (${member.role}) - ${member.department} - ${member.email}`
).join('\n')}

PROJECT DESCRIPTION
-------------------
${exportData.description || 'No description provided'}

EXPORT INFORMATION
------------------
Export Date: ${new Date(exportData.exportDate).toLocaleString()}
Generated by: Midroc ERP System
Format: Construction Project Report

=====================================
© ${new Date().getFullYear()} Midroc Construction & Consulting
    `;
    
    const dataBlob = new Blob([pdfContent], {type: 'text/plain'});
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${project.name.replace(/\s+/g, '_')}_Project_Report.txt`;
    link.click();
    URL.revokeObjectURL(url);
    
    setNotification({
      type: 'success',
      message: `Project "${project.name}" exported as detailed report!`
    });
    setTimeout(() => setNotification(null), 3000);
  };

  const handleDeleteProject = (project: Project) => {
    if (window.confirm(`Are you sure you want to delete "${project.name}"? This action cannot be undone.`)) {
      deleteProject(project.id);
      setNotification({
        type: 'success',
        message: `Project "${project.name}" has been deleted successfully.`
      });
      setTimeout(() => setNotification(null), 3000);
    }
  };
  const filteredProjects = projects.filter(project => {
    const matchesSearch = project.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || project.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const projectStats = {
    total: projects.length,
    active: projects.filter(p => p.status === 'active').length,
    planning: projects.filter(p => p.status === 'planning').length,
    completed: projects.filter(p => p.status === 'completed').length,
    onHold: projects.filter(p => p.status === 'on-hold').length,
  };

  return (
    <div className="space-y-6">
      {/* Notification */}
      {notification && (
        <div className={`fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg flex items-center gap-2 ${
          notification.type === 'success' ? 'bg-green-100 text-green-800 border border-green-200' : 'bg-red-100 text-red-800 border border-red-200'
        }`}>
          {notification.type === 'success' ? <CheckCircle className="w-5 h-5" /> : <AlertCircle className="w-5 h-5" />}
          {notification.message}
        </div>
      )}

      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Construction Project Management</h1>
          <p className="text-gray-600">Manage and track all construction and consulting projects</p>
        </div>
        {(user?.role === 'admin' || user?.role === 'general_manager') && (
          <button 
            onClick={() => setShowNewProjectModal(true)}
            className="bg-green-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-green-800 transition-colors"
          >
            <Plus className="w-4 h-4" />
            New Construction Project
          </button>
        )}
      </div>

      {/* Statistics Bar */}
      <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-4 rounded-lg shadow-lg">
          <div className="text-2xl font-bold">{projectStats.total}</div>
          <div className="text-blue-100 text-sm">Total Construction Projects</div>
        </div>
        <div className="bg-gradient-to-r from-green-500 to-green-600 text-white p-4 rounded-lg shadow-lg">
          <div className="text-2xl font-bold">{projectStats.active}</div>
          <div className="text-green-100 text-sm">Active Construction</div>
        </div>
        <div className="bg-gradient-to-r from-yellow-500 to-yellow-600 text-white p-4 rounded-lg shadow-lg">
          <div className="text-2xl font-bold">{projectStats.planning}</div>
          <div className="text-yellow-100 text-sm">Design & Planning</div>
        </div>
        <div className="bg-gradient-to-r from-purple-500 to-purple-600 text-white p-4 rounded-lg shadow-lg">
          <div className="text-2xl font-bold">{projectStats.completed}</div>
          <div className="text-purple-100 text-sm">Completed Projects</div>
        </div>
        <div className="bg-gradient-to-r from-red-500 to-red-600 text-white p-4 rounded-lg shadow-lg">
          <div className="text-2xl font-bold">{projectStats.onHold}</div>
          <div className="text-red-100 text-sm">Suspended Projects</div>
        </div>
      </div>

      {/* Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
          <input
            type="text"
            placeholder="Search projects..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
          />
        </div>
        <div className="relative">
          <Filter className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="pl-10 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent appearance-none bg-white"
          >
            <option value="all">All Status</option>
            <option value="active">Active</option>
            <option value="planning">Planning</option>
            <option value="completed">Completed</option>
            <option value="on-hold">On Hold</option>
          </select>
        </div>
      </div>

      {/* Projects Table */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50 border-b border-gray-200">
              <tr>
                <th className="text-left px-6 py-4 text-sm font-semibold text-gray-900">Construction Project</th>
                <th className="text-left px-6 py-4 text-sm font-semibold text-gray-900">Status</th>
                <th className="text-left px-6 py-4 text-sm font-semibold text-gray-900">Priority</th>
                <th className="text-left px-6 py-4 text-sm font-semibold text-gray-900">Progress</th>
                <th className="text-left px-6 py-4 text-sm font-semibold text-gray-900">Contract Value</th>
                <th className="text-left px-6 py-4 text-sm font-semibold text-gray-900">Timeline</th>
                <th className="text-left px-6 py-4 text-sm font-semibold text-gray-900">Construction Team</th>
                <th className="text-left px-6 py-4 text-sm font-semibold text-gray-900">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {filteredProjects.map((project) => (
                <tr key={project.id} className="hover:bg-gray-50 transition-colors">
                  <td className="px-6 py-4">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 bg-gradient-to-br from-green-100 to-green-200 rounded-lg flex items-center justify-center border border-green-300">
                        <HardHat className="w-5 h-5 text-green-700" />
                      </div>
                      <div>
                        <div className="font-medium text-gray-900">{project.name}</div>
                        <div className="text-sm text-gray-500">Project Manager: {project.manager.name}</div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium capitalize ${getStatusColor(project.status)}`}>
                      {project.status}
                    </span>
                  </td>
                  <td className="px-6 py-4">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium capitalize ${getPriorityColor(project.priority)}`}>
                      {project.priority}
                    </span>
                  </td>
                  <td className="px-6 py-4">
                    <div className="flex items-center gap-3">
                      <div className="flex-1 bg-gray-200 rounded-full h-2">
                        <div
                          className="bg-gradient-to-r from-green-600 to-green-700 h-2 rounded-full transition-all"
                          style={{ width: `${project.progress}%` }}
                        />
                      </div>
                      <span className="text-sm font-medium text-gray-900 w-12">{project.progress}%</span>
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <span className="text-sm font-medium text-gray-900">{formatCurrency(project.budget)}</span>
                  </td>
                  <td className="px-6 py-4">
                    <div className="text-sm text-gray-900">
                      <div>{new Date(project.startDate).toLocaleDateString()}</div>
                      <div className="text-gray-500">to {new Date(project.endDate).toLocaleDateString()}</div>
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="flex -space-x-2">
                      {project.team.slice(0, 3).map((member, index) => (
                        <div
                          key={index}
                          className="w-8 h-8 bg-gradient-to-br from-green-100 to-green-200 rounded-full flex items-center justify-center border-2 border-white text-xs font-medium text-green-700"
                          title={member.name}
                        >
                          {member.name.charAt(0)}
                        </div>
                      ))}
                      {project.team.length > 3 && (
                        <div className="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center border-2 border-white text-xs font-medium text-gray-600">
                          +{project.team.length - 3}
                        </div>
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="flex items-center gap-2">
                      <button 
                        onClick={() => handleViewProject(project)}
                        className="p-1 text-gray-400 hover:text-blue-600 transition-colors" 
                        title="View Details"
                      >
                        <Eye className="w-4 h-4" />
                      </button>
                      {(user?.role === 'admin' || user?.role === 'general_manager' || user?.role === 'project_manager') && (
                        <button 
                          onClick={() => handleEditProject(project)}
                          className="p-1 text-gray-400 hover:text-green-600 transition-colors" 
                          title="Edit Project"
                        >
                          <Edit className="w-4 h-4" />
                        </button>
                      )}
                      {(user?.role === 'admin' || user?.role === 'general_manager') && (
                        <button 
                          onClick={() => handleManageProject(project)}
                          className="p-1 text-gray-400 hover:text-purple-600 transition-colors" 
                          title="Manage Project"
                        >
                          <Settings className="w-4 h-4" />
                        </button>
                      )}
                      {(user?.role === 'admin' || user?.role === 'general_manager' || user?.role === 'project_manager') && (
                        <button 
                          onClick={() => handleExportProject(project)}
                          className="p-1 text-gray-400 hover:text-orange-600 transition-colors" 
                          title="Export Data"
                        >
                          <Download className="w-4 h-4" />
                        </button>
                      )}
                      {user?.role === 'admin' && (
                        <button 
                          onClick={() => handleDeleteProject(project)}
                          className="p-1 text-gray-400 hover:text-red-600 transition-colors" 
                          title="Delete Project"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Modals */}
      {showNewProjectModal && (
        <NewProjectModal 
          onClose={() => setShowNewProjectModal(false)}
          onSave={(projectData) => {
            addProject(projectData);
            setShowNewProjectModal(false);
            setNotification({
              type: 'success',
              message: `Project "${projectData.name}" created successfully!`
            });
            setTimeout(() => setNotification(null), 3000);
          }}
        />
      )}

      {showDetailsModal && selectedProject && (
        <ProjectDetailsModal 
          project={selectedProject}
          onClose={() => {
            setShowDetailsModal(false);
            setSelectedProject(null);
          }}
        />
      )}

      {showEditModal && selectedProject && (
        <EditProjectModal 
          project={selectedProject}
          onClose={() => {
            setShowEditModal(false);
            setSelectedProject(null);
          }}
          onSave={(updatedProject) => {
            updateProject(updatedProject);
            setShowEditModal(false);
            setSelectedProject(null);
            setNotification({
              type: 'success',
              message: `Project "${updatedProject.name}" updated successfully!`
            });
            setTimeout(() => setNotification(null), 3000);
          }}
        />
      )}
    </div>
  );
};